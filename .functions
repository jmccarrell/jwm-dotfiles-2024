#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_" || exit 23;
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

if command -v git 1>/dev/null 2>&1; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;


# Compare original and gzipped file size
function gz() {
    local origsize='' gzipsize='' ratio=''
    origsize=$(wc -c < "$1");
    gzipsize=$(gzip -c "$1" | wc -c);
    ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" "$(printf "%s" "$@" | xxd -p -c1 -u);"
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    # don't apply shellcheck to perl code
    # shellcheck disable=SC2145
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Get a character’s Unicode code point
function codepoint() {
    # don't apply shellcheck to perl code
    # shellcheck disable=SC2145
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=''
    tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
              | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=''
        certText=$(echo "${tmp}" \
                       | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
                        no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
# function o() {
#       if [ $# -eq 0 ]; then
#               open .;
#       else
#               open "$@";
#       fi;
# }

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

#
# jeffs functions
#

# is this a persona laptop we are running on?
function persona_host_p {
    dir=$HOME/Jts
    if [[ -e $dir && -d $dir ]]; then
        return 1;
    fi;
    return 0;
}

# join an array into a string
#  from https://stackoverflow.com/questions/1527049/join-elements-of-an-array
# join_by ' , ' a b c
#  gives
# a , b , c
function join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

#
# select the JVM version in use
#
# see all versions with -V/--verbose
#  set a version with -v/--version
#  cf: https://www.kevinhooke.com/2017/10/05/switching-java-versions-on-mac-os/
function jwm_prefer_java_8 {
    jh=$(/usr/libexec/java_home --version 1.8)
    export JAVA_HOME="$jh"
}

function jwm_prefer_java_11 {
    jh=$(/usr/libexec/java_home --version 11)
    export JAVA_HOME="$jh"
}

#
# sync Jeffs repos to ease multi machine editing.
#  shamelessly derived from http://doc.norang.ca/org-mode.html#git-sync
#

# Log a message for a repository
git_sync_log_msg() {
    printf "  %s\n" "$1"
}

# fast-forward reference $ref to $remote/$ref
git_fast_forward_ref() {
    local git_path="$1"
    local remote="$2"
    local ref="$3"
    git_sync_log_msg "fast-forwarding ref $ref"
    current_ref=$(cat "$git_path"/.git/HEAD)
    if [ "$current_ref" = "ref: refs/heads/$ref" ]
    then
        # Check for dirty index
        files=$(git -C "$git_path" diff-index --name-only HEAD --)
        git -C "$git_path" merge refs/remotes/"$remote"/"$ref"
    else
        git -C "$git_path" branch -f "$ref" refs/remotes/"$remote"/"$ref"
    fi
}

# Push reference $1 to $remote
git_push_ref() {
    local git_path="$1"
    local remote="$2"
    local ref="$3"
    git_sync_log_msg "Pushing ref $ref to $remote"
    if ! git -C "$git_path" push --tags "$remote" "$ref"
    then
        return 1
    fi
}

# Check if a ref can be moved
#   - fast-forwards if behind the sync repo and is fast-forwardable
#   - Does nothing if ref is up to date
#   - Pushes ref to $remote if ref is ahead of remote and fastforwardable
#   - Fails if ref and $syncrop/ref have diverged
git_check_ref() {
    local git_path="$1"
    local remote="$2"
    local ref="$3"
    revlist1=$(git -C "$git_path" rev-list refs/remotes/"$remote"/"$ref".."$ref")
    revlist2=$(git -C "$git_path" rev-list "$ref"..refs/remotes/"$remote"/"$ref")
    if [ "x$revlist1" = "x" ] && [ "x$revlist2" = "x" ]
    then
        # Ref $ref is up to date.
        :
    elif [ "x$revlist1" = "x" ]
    then
        # Ref $ref is behind $remote/$ref and can be fast-forwarded.
        git_fast_forward_ref "$git_path" "$remote" "$ref" || return 1
    elif [ "x$revlist2" = "x" ]
    then
        # Ref $ref is ahead of $remote/$ref and can be pushed.
        git_push_ref "$git_path" "$remote" "$ref" || return 1
    else
        git_sync_log_msg "Ref $ref and $remote/$ref have diverged."
        return 1
    fi
}

# Check all local refs with matching refs in the $remote
#  effectively this syncs all tracking branchs
git_check_refs() {
    local git_path="$1"
    local remote="$2"
    git -C "$git_path" for-each-ref "refs/heads/*" | while read -r sha1 commit ref
    do
        ref=${ref/refs\/heads\//}
        git -C "$git_path" for-each-ref refs/remotes/"$remote"/"$ref" | while read -r sha2 commit ref2
        do
            if [ "x$sha2" != "x" ] && [ "x$sha2" != "x" ]
            then
                git_check_ref "$git_path" "$remote" "$ref" || return 1
            fi
        done
    done
}

# sync the remote down to local
git_update_remote() {
    local git_path="$1"
    local remote="$2"
    upd_out=$(git -C "$git_path" remote update "$remote" 2>& 1 || return 1)
    git_sync_log_msg "$git_path: $upd_out"
    [ "$upd_out" = "Fetching $remote" ] || {
        git_sync_log_msg "$git_path: $upd_out"
    }
}

git_sync() {
    local git_path="$1"
    local remote="$2"
    [[ -d $git_path ]] || return 1
    git_update_remote "$git_path" "$remote" || return 1
    git_check_refs "$git_path" "$remote" || return 1
}

jwm_dir() {
    printf "%s\n" "${HOME}/jwm"
}

gs_todo() {
    git_sync "$(jwm_dir)/todo" origin
}

gs_notes() {
    git_sync "$(jwm_dir)/notes" origin
}

gs_dotfiles() {
    git_sync "$(jwm_dir)/proj/jwm-dotfiles-2024" origin
    git_sync "$(jwm_dir)/proj/jwm-dotfiles" origin
    git_sync "$(jwm_dir)/proj/jeff-dotfiles" origin
}

gs_jwm_bin() {
    git_sync "$(jwm_dir)/proj/jwm-bin" origin
}

gs_jwm_pdata_notes() {
    git_sync "${HOME}/pdata/notes" origin
}

gs_home_lab() {
    git_sync "${HOME}/pdata/proj/home-lab-infra" origin
}

gs_ebooks() {
    git_sync "$(jwm_dir)/ebooks" origin
}

gs_literate-emacs-d() {
    git_sync "$(jwm_dir)/proj/literate-emacs.d" origin
}

gs_all() {
    gs_todo
    gs_notes
    gs_literate-emacs-d
    gs_dotfiles
    gs_jwm_bin
    gs_jwm_pdata_notes
    gs_home_lab
    gs_ebooks
}

#
# end jeffs functions
#
